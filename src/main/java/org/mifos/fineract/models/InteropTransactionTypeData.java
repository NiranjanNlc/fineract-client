/*
 * Apache Fineract API Documentation
 * Apache Fineract is a secure, multi-tenanted microfinance platform. <br/>              The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform. The reference app [  https://demo.openmf.org  ] (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation.              <br/>The API                 is organized around REST [ https://en.wikipedia.org/wiki/Representational_state_transfer ]               <br/> Find out more about Apache Fineract on [ https://demo.openmf.org/api-docs/apiLive.htm#top ]              <br/> You can Try The API From Your Browser itself at [ https://demo.openmf.org/api-docs/apiLive.htm#interact ]              <br/> The Generic Options are available at [ https://demo.openmf.org/api-docs/apiLive.htm#genopts ]              <br/> Find out more about Updating Dates and Numbers at [ https://demo.openmf.org/api-docs/apiLive.htm#dates_and_numbers ]              <br/> For the Authentication and the Basic of HTTP and HTTPS refer [ https://demo.openmf.org/api-docs/apiLive.htm#authentication_overview ]              <br/> Check about ERROR codes at [ https://demo.openmf.org/api-docs/apiLive.htm#errors ]               <br/> <br/> Please refer to the old documentation for any documentation queries [ https://demo.openmf.org/api-docs/apiLive.htm ]              <br/>             ______________________________________________________________________________________________________________________________
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.mifos.fineract.models;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * InteropTransactionTypeData
 */

public class InteropTransactionTypeData {
    @SerializedName("scenario")
    private ScenarioEnum scenario = null;
    @SerializedName("subScenario")
    private String subScenario = null;
    @SerializedName("initiator")
    private InitiatorEnum initiator = null;
    @SerializedName("initiatorType")
    private InitiatorTypeEnum initiatorType = null;

    public InteropTransactionTypeData scenario(ScenarioEnum scenario) {
        this.scenario = scenario;
        return this;
    }

    /**
     * Get scenario
     *
     * @return scenario
     **/
    @ApiModelProperty(required = true, value = "")
    public ScenarioEnum getScenario() {
        return scenario;
    }

    public void setScenario(ScenarioEnum scenario) {
        this.scenario = scenario;
    }

    public InteropTransactionTypeData subScenario(String subScenario) {
        this.subScenario = subScenario;
        return this;
    }

    /**
     * Get subScenario
     *
     * @return subScenario
     **/
    @ApiModelProperty(value = "")
    public String getSubScenario() {
        return subScenario;
    }

    public void setSubScenario(String subScenario) {
        this.subScenario = subScenario;
    }

    public InteropTransactionTypeData initiator(InitiatorEnum initiator) {
        this.initiator = initiator;
        return this;
    }

    /**
     * Get initiator
     *
     * @return initiator
     **/
    @ApiModelProperty(required = true, value = "")
    public InitiatorEnum getInitiator() {
        return initiator;
    }

    public void setInitiator(InitiatorEnum initiator) {
        this.initiator = initiator;
    }

    public InteropTransactionTypeData initiatorType(InitiatorTypeEnum initiatorType) {
        this.initiatorType = initiatorType;
        return this;
    }

    /**
     * Get initiatorType
     *
     * @return initiatorType
     **/
    @ApiModelProperty(required = true, value = "")
    public InitiatorTypeEnum getInitiatorType() {
        return initiatorType;
    }

    public void setInitiatorType(InitiatorTypeEnum initiatorType) {
        this.initiatorType = initiatorType;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InteropTransactionTypeData interopTransactionTypeData = (InteropTransactionTypeData) o;
        return Objects.equals(this.scenario, interopTransactionTypeData.scenario) &&
                Objects.equals(this.subScenario, interopTransactionTypeData.subScenario) &&
                Objects.equals(this.initiator, interopTransactionTypeData.initiator) &&
                Objects.equals(this.initiatorType, interopTransactionTypeData.initiatorType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(scenario, subScenario, initiator, initiatorType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InteropTransactionTypeData {\n");

        sb.append("    scenario: ").append(toIndentedString(scenario)).append("\n");
        sb.append("    subScenario: ").append(toIndentedString(subScenario)).append("\n");
        sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
        sb.append("    initiatorType: ").append(toIndentedString(initiatorType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets scenario
     */
    @JsonAdapter(ScenarioEnum.Adapter.class)
    public enum ScenarioEnum {
        DEPOSIT("DEPOSIT"),

        WITHDRAWAL("WITHDRAWAL"),

        TRANSFER("TRANSFER"),

        PAYMENT("PAYMENT"),

        REFUND("REFUND");

        private String value;

        ScenarioEnum(String value) {
            this.value = value;
        }

        public static ScenarioEnum fromValue(String text) {
            for (ScenarioEnum b : ScenarioEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<ScenarioEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ScenarioEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ScenarioEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ScenarioEnum.fromValue(String.valueOf(value));
            }
        }
    }


    /**
     * Gets or Sets initiator
     */
    @JsonAdapter(InitiatorEnum.Adapter.class)
    public enum InitiatorEnum {
        PAYER("PAYER"),

        PAYEE("PAYEE");

        private String value;

        InitiatorEnum(String value) {
            this.value = value;
        }

        public static InitiatorEnum fromValue(String text) {
            for (InitiatorEnum b : InitiatorEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<InitiatorEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final InitiatorEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public InitiatorEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return InitiatorEnum.fromValue(String.valueOf(value));
            }
        }
    }

    /**
     * Gets or Sets initiatorType
     */
    @JsonAdapter(InitiatorTypeEnum.Adapter.class)
    public enum InitiatorTypeEnum {
        CONSUMER("CONSUMER"),

        AGENT("AGENT"),

        BUSINESS("BUSINESS"),

        DEVICE("DEVICE");

        private String value;

        InitiatorTypeEnum(String value) {
            this.value = value;
        }

        public static InitiatorTypeEnum fromValue(String text) {
            for (InitiatorTypeEnum b : InitiatorTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<InitiatorTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final InitiatorTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public InitiatorTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return InitiatorTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

